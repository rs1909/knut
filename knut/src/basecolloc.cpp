// ------------------------------------------------------------------------- //
//
// This is part of KNUT
// Copyright (c) 2009 by Robert Szalai
//
// For license, see the file COPYING in the package's root directory
//
// ------------------------------------------------------------------------- //

#include <cmath>
#include "basecolloc.h"
#include "polynomial.h"
#include "system.h"

#ifdef DEBUG
#include <iostream>
#include <fstream>
#endif /*DEBUG*/

static const double legendre_roots[25][25] = 
{{0.5000000000000000000000000000000000000000},
 {0.5000000000000000000000000000000000000000},
 {0.2113248654051871177454256097490212721762, 0.7886751345948128822545743902509787278238},
 {0.1127016653792583114820734600217600389167, 0.5000000000000000000000000000000000000000, 0.8872983346207416885179265399782399610833},
 {0.0694318442029737123880267555535952474521, 0.3300094782075718675986671204483776563997, 0.6699905217924281324013328795516223436003, 0.9305681557970262876119732444464047525479},
 {0.0469100770306680036011865608503035174372, 0.2307653449471584544818427896498955975164, 0.5000000000000000000000000000000000000000, 0.7692346550528415455181572103501044024836, 0.9530899229693319963988134391496964825628},
 {0.0337652428984239860938492227530026954326, 0.1693953067668677431693002024900473264968, 0.3806904069584015456847491391596440322907, 0.6193095930415984543152508608403559677093, 0.8306046932331322568306997975099526735032, 0.9662347571015760139061507772469973045674},
 {0.0254460438286207377369051579760743687996, 0.1292344072003027800680676133596057964629, 0.2970774243113014165466967939615192683263, 0.5000000000000000000000000000000000000000, 0.7029225756886985834533032060384807316737, 0.8707655927996972199319323866403942035371, 0.9745539561713792622630948420239256312004},
 {0.0198550717512318841582195657152635047859, 0.1016667612931866302042230317620847815814, 0.2372337950418355070911304754053768254790, 0.4082826787521750975302619288199080096666, 0.5917173212478249024697380711800919903334, 0.7627662049581644929088695245946231745210, 0.8983332387068133697957769682379152184186, 0.9801449282487681158417804342847364952141},
 {0.0159198802461869550822118985481635649753, 0.0819844463366821028502851059651325617279, 0.1933142836497048013456489803292629076071, 0.3378732882980955354807309926783316957140, 0.5000000000000000000000000000000000000000, 0.6621267117019044645192690073216683042860, 0.8066857163502951986543510196707370923929, 0.9180155536633178971497148940348674382721, 0.9840801197538130449177881014518364350247},
 {0.0130467357414141399610179939577739732859, 0.0674683166555077446339516557882534757362, 0.1602952158504877968828363174425632121154, 0.2833023029353764046003670284171079189000, 0.4255628305091843945575869994351400076912, 0.5744371694908156054424130005648599923088, 0.7166976970646235953996329715828920811000, 0.8397047841495122031171636825574367878846, 0.9325316833444922553660483442117465242638, 0.9869532642585858600389820060422260267141},
 {0.0108856709269715035980309994385713046143, 0.0564687001159523504624211153480363666842, 0.1349239972129753379532918739844232709752, 0.2404519353965940920371371652706952227599, 0.3652284220238275138342340072995692376602, 0.5000000000000000000000000000000000000000, 0.6347715779761724861657659927004307623398, 0.7595480646034059079628628347293047772401, 0.8650760027870246620467081260155767290248, 0.9435312998840476495375788846519636333158, 0.9891143290730284964019690005614286953857},
 {0.0092196828766403746547254549253595885199, 0.0479413718147625716607670669404519037312, 0.1150486629028476564815530833935909620075, 0.2063410228566912763516487905297328598155, 0.3160842505009099031236542316781412193718, 0.4373832957442655422637793152680734350083, 0.5626167042557344577362206847319265649917, 0.6839157494990900968763457683218587806282, 0.7936589771433087236483512094702671401845, 0.8849513370971523435184469166064090379925, 0.9520586281852374283392329330595480962688, 0.9907803171233596253452745450746404114801},
 {0.0079084726407059252635852755964451944675, 0.0412008003885110173967260817496402438048, 0.0992109546333450436028967552085700548472, 0.1788253302798298896780076965022421749642, 0.2757536244817765735610435739361800660990, 0.3847708420224326029672359394510055823942, 0.5000000000000000000000000000000000000000, 0.6152291579775673970327640605489944176058, 0.7242463755182234264389564260638199339010, 0.8211746697201701103219923034977578250358, 0.9007890453666549563971032447914299451528, 0.9587991996114889826032739182503597561952, 0.9920915273592940747364147244035548055325},
 {0.0068580956515938305792013666479735991620, 0.0357825581682132413318044303110628677615, 0.0863993424651175034051026286748025194801, 0.1563535475941572649259900984903329312308, 0.2423756818209229540173546407244056688456, 0.3404438155360551197821640879157622665829, 0.4459725256463281689668776748900826261940, 0.5540274743536718310331223251099173738060, 0.6595561844639448802178359120842377334171, 0.7576243181790770459826453592755943311544, 0.8436464524058427350740099015096670687692, 0.9136006575348824965948973713251974805199, 0.9642174418317867586681955696889371322385, 0.9931419043484061694207986333520264008380},
 {0.0060037409897572857552171407066937094265, 0.0313633037996470478461205261448952643780, 0.0758967082947863918996758396128915743169, 0.1377911343199149762919069726930309951846, 0.2145139136957305762313866313730446793808, 0.3029243264612183150513963145094772658186, 0.3994029530012827388496858483027018960936, 0.5000000000000000000000000000000000000000, 0.6005970469987172611503141516972981039064, 0.6970756735387816849486036854905227341814, 0.7854860863042694237686133686269553206192, 0.8622088656800850237080930273069690048154, 0.9241032917052136081003241603871084256831, 0.9686366962003529521538794738551047356220, 0.9939962590102427142447828592933062905735},
 {0.0052995325041750337019229132748336862869, 0.0277124884633837119610057922326958274544, 0.0671843988060841280597660511438034338063, 0.1222977958224984830524494025762788658231, 0.1910618777986781257766641179756044905041, 0.2709916111713863068287902785082112132300, 0.3591982246103705433847697492697519467570, 0.4524937450811812799073403322875209684348, 0.5475062549188187200926596677124790315652, 0.6408017753896294566152302507302480532430, 0.7290083888286136931712097214917887867700, 0.8089381222013218742233358820243955094959, 0.8777022041775015169475505974237211341769, 0.9328156011939158719402339488561965661937, 0.9722875115366162880389942077673041725456, 0.9947004674958249662980770867251663137131},
 {0.0047122623427913321622829900296673617461, 0.0246622391156161193886415210520984892783, 0.0598804231365070489385221527559221536883, 0.1092429980515992965373849722397619748880, 0.1711644203916546170748488916784988324261, 0.2436547314567615160568767156852240627085, 0.3243841182730618423514072414523269974797, 0.4107579092520760720746612531729672212623, 0.5000000000000000000000000000000000000000, 0.5892420907479239279253387468270327787377, 0.6756158817269381576485927585476730025203, 0.7563452685432384839431232843147759372915, 0.8288355796083453829251511083215011675739, 0.8907570019484007034626150277602380251120, 0.9401195768634929510614778472440778463117, 0.9753377608843838806113584789479015107217, 0.9952877376572086678377170099703326382539},
 {0.0042174157895345266349919976469246148737, 0.0220880252143011224094020535351118450136, 0.0536987667512221303969697044364272422961, 0.0981475205137384421587912724927046014484, 0.1541564784698233960625544593555758052739, 0.2201145844630262326960642257373354315362, 0.2941244192685786769820341030834741814605, 0.3740568871542472452055135725610443849186, 0.4576124934791323493788690735321080941333, 0.5423875065208676506211309264678919058667, 0.6259431128457527547944864274389556150814, 0.7058755807314213230179658969165258185395, 0.7798854155369737673039357742626645684638, 0.8458435215301766039374455406444241947261, 0.9018524794862615578412087275072953985516, 0.9463012332487778696030302955635727577039, 0.9779119747856988775905979464648881549864, 0.9957825842104654733650080023530753851263},
 {0.0037965780782077984054911648733697532053, 0.0198959239325849845736105796561742366925, 0.0484220481925910491786695357338437560953, 0.0886426717314285875105387566436430491127, 0.1395169113323853106914520695881091851714, 0.1997273476691594882651809175268803600658, 0.2677146293120195271413664259479488160119, 0.3417179500181850840049413355750775410539, 0.4198206771798873120659519421296282252476, 0.5000000000000000000000000000000000000000, 0.5801793228201126879340480578703717747524, 0.6582820499818149159950586644249224589461, 0.7322853706879804728586335740520511839881, 0.8002726523308405117348190824731196399342, 0.8604830886676146893085479304118908148286, 0.9113573282685714124894612433563569508873, 0.9515779518074089508213304642661562439047, 0.9801040760674150154263894203438257633075, 0.9962034219217922015945088351266302467947},
 {0.0034357004074525376069388057643398608887, 0.0180140363610431043661669344013613890440, 0.0438827858743370470661237793983509434754, 0.0804415140888905883027354691492396573352, 0.1268340467699246036928474648221792048446, 0.1819731596367424872735816518868570316283, 0.2445664990245864509978179745223745007873, 0.3131469556422902196637259114875363813021, 0.3861070744291774609597519023157126876285, 0.4617367394332513331226797953005808944976, 0.5382632605667486668773202046994191055024, 0.6138929255708225390402480976842873123715, 0.6868530443577097803362740885124636186979, 0.7554335009754135490021820254776254992127, 0.8180268403632575127264183481131429683717, 0.8731659532300753963071525351778207951554, 0.9195584859111094116972645308507603426648, 0.9561172141256629529338762206016490565246, 0.9819859636389568956338330655986386109560, 0.9965642995925474623930611942356601391113},
 {0.0031239146898052498698789820310295354033, 0.0163865807168468528416888925461524192877, 0.0399503329247995856049064331425155529204, 0.0733183177083413581763746807062161648619, 0.1157800182621610456920610743468859825895, 0.1664305979012938403470166650048304187015, 0.2241905820563900964704906016378433566890, 0.2878289398962806082131655557281059739518, 0.3559893415987994516996037419676998400455, 0.4272190729195524545314845088306568349418, 0.5000000000000000000000000000000000000000, 0.5727809270804475454685154911693431650582, 0.6440106584012005483003962580323001599545, 0.7121710601037193917868344442718940260482, 0.7758094179436099035295093983621566433110, 0.8335694020987061596529833349951695812985, 0.8842199817378389543079389256531140174105, 0.9266816822916586418236253192937838351381, 0.9600496670752004143950935668574844470796, 0.9836134192831531471583111074538475807123, 0.9968760853101947501301210179689704645967},
 {0.0028527072588003539634842894193505098035, 0.0149697510822856364380245066173656445970, 0.0365216139064129997396535303704734016823, 0.0670937111398499317317871814903106354576, 0.1060915970103959189978610222958242393059, 0.1527563684066586099746550821188716143663, 0.2061797982465442035205615361806763255612, 0.2653220810066214867968346445167968269523, 0.3290320895539578874209262897863101902204, 0.3960697866558893572605767330402271328922, 0.4651303633401388893930791019406859590889, 0.5348696366598611106069208980593140409111, 0.6039302133441106427394232669597728671078, 0.6709679104460421125790737102136898097796, 0.7346779189933785132031653554832031730477, 0.7938202017534557964794384638193236744388, 0.8472436315933413900253449178811283856337, 0.8939084029896040810021389777041757606941, 0.9329062888601500682682128185096893645424, 0.9634783860935870002603464696295265983177, 0.9850302489177143635619754933826343554030, 0.9971472927411996460365157105806494901965},
 {0.0026153325012239382380371422772128197132, 0.0137287643909423840219879615896113124092, 0.0335144565869919488254015054807885108821, 0.0616238208647791663109215570329271641805, 0.0975557991905800539244407965016107210293, 0.1406693184340249027691877581256905758350, 0.1901950621181769218074513441752021733064, 0.2452492610769962251551034760665767847276, 0.3048494809848545842892555635596972707110, 0.3679321595148275347330652308583451985105, 0.4333715878507669445341286588791169314948, 0.5000000000000000000000000000000000000000, 0.5666284121492330554658713411208830685052, 0.6320678404851724652669347691416548014895, 0.6951505190151454157107444364403027292890, 0.7547507389230037748448965239334232152724, 0.8098049378818230781925486558247978266936, 0.8593306815659750972308122418743094241650, 0.9024442008094199460755592034983892789707, 0.9383761791352208336890784429670728358195, 0.9664855434130080511745984945192114891179, 0.9862712356090576159780120384103886875908, 0.9973846674987760617619628577227871802868},
 {0.0024063900014893199100012951496315940627, 0.0126357220143452509008040034959154691294, 0.0308627239986336207381754991456392751726, 0.0567922364977994828934228290089016224563, 0.0899990070130485390230250636651273959619, 0.1299379042107228178780859484500107872384, 0.1759531740315122153737521065446261866652, 0.2272892643055802321708121913908138149946, 0.2831032461869774307564578840433251437738, 0.3424786601519183128066033543400948796068, 0.4044405662631918454206800896214651840798, 0.4679715535686971869574784586876274807045, 0.5320284464313028130425215413123725192955, 0.5955594337368081545793199103785348159202, 0.6575213398480816871933966456599051203932, 0.7168967538130225692435421159566748562262, 0.7727107356944197678291878086091861850054, 0.8240468259684877846262478934553738133348, 0.8700620957892771821219140515499892127616, 0.9100009929869514609769749363348726040381, 0.9432077635022005171065771709910983775437, 0.9691372760013663792618245008543607248274, 0.9873642779856547490991959965040845308706, 0.9975936099985106800899987048503684059373}};

static const double radau_roots[25][25] =
{{1.000000000000000000000000000000000000000},
 {1.000000000000000000000000000000000000000},
 {0.3333333333333333333333333333333333333333, 1.000000000000000000000000000000000000000},
 {0.1550510257216821901802715925294108608034, 0.6449489742783178098197284074705891391966, 1.000000000000000000000000000000000000000},
 {0.08858795951270394739554614376945619688573, 0.4094668644407347108649262520688298940519, 0.7876594617608470560252418898759996233481, 1.000000000000000000000000000000000000000},
 {0.05710419611451768219312119255411562123508, 0.2768430136381238276800459976856251411109, 0.5835904323689168200566976686629172486934, 0.8602401356562194478479129188751197667384, 1.000000000000000000000000000000000000000},
 {0.03980985705146874234080669009333316770426, 0.1980134178736081725357921367952962360382, 0.4379748102473861440050125200052288525168, 0.6954642733536360945146148237211671613940, 0.9014649142011735738765011021122473096195, 1.000000000000000000000000000000000000000},
 {0.02931642715978489197205027691316491037373, 0.1480785996684842918499768524959792122302, 0.3369846902811542990970529720807757051976, 0.5586715187715501320813933418055219400744, 0.7692338620300545009168833601156454518371, 0.9269456713197411148518739658196820110562, 1.000000000000000000000000000000000000000},
 {0.02247938643871249810882549957084505992217, 0.1146790531609042319096402370675146270777, 0.2657898227845894684767893916933899974370, 0.4528463736694446169985514423476511453596, 0.6473752828868303626260922298287587971920, 0.8197593082631076350124200571908182154579, 0.9437374394630778535343478089676888242202, 1.000000000000000000000000000000000000000},
 {0.01777991514736345181320510103767906126649, 0.09132360789979395600374145807454135310704, 0.2143084793956307583575412675816703226744, 0.3719321645832723024308539604826292446681, 0.5451866848034266490322722299532130551330, 0.7131752428555694810513137602509073414469, 0.8556337429578544285147814797717850302865, 0.9553660447100301492668789781416922384764, 1.000000000000000000000000000000000000000},
 {0.01441240964887654863282674081081323941174, 0.07438738970919604463591818595599858508098, 0.1761166561629952818631757460725685864114, 0.3096675799276378170596204672294840488164, 0.4619704010810109348831431086805643081072, 0.6181172346952940246392297516035044802807, 0.7628230151850396146826933071467255329235, 0.8819210212100012998077148880052647763071, 0.9637421871167905390588356992319185479241, 1.000000000000000000000000000000000000000},
 {0.01191761343241559690974558695898597603003, 0.06173207187714812552262936719425014145287, 0.1471114496430702404275994355798195021338, 0.2611596760084562402660516580548457231986, 0.3946398468857868429619521050776075022149, 0.5367387657156606328730951777118890227812, 0.6759444616766651073571505089347614715040, 0.8009789210368988451379463016172425246730, 0.9017109877901467703487989784097679814681, 0.9699709678385135029569356423655920593053, 1.000000000000000000000000000000000000000},
 {0.01001828046168040584302472986780478481479, 0.05203545112718055258354269577296432244719, 0.1246192251444430737352995872639092292474, 0.2228406070438378555078314534573627644117, 0.3400081579146651882336052338970175277313, 0.4681376130895840420831103807577535932853, 0.5984972797671391832277207136730435902749, 0.7222032848909679255633213078046109071372, 0.8308248996228185740305665439056567039440, 0.9169583865525948532931346270180274177520, 0.9747263796024796502466688135383708980845, 1.000000000000000000000000000000000000000},
 {0.008539054988427419368664460877839802806090, 0.04444646315540772302546679878555276624131, 0.1068544908834766576341067704324992625898, 0.1921510545298540409910572562286133303827, 0.2953808842625802216229168343760149059399, 0.4105450812014576824890343505593324118433, 0.5309508493128176706289302428968181393245, 0.6496006502772549927662917233429805722257, 0.7595988895252270537426025740434203419422, 0.8545525437649358807902119164056171284860, 0.9289421012644110178488101551343152998505, 0.9784379368341496390919069169169960383681, 1.00000000000000000000000000000000000000},
 {0.007364651026089321650691498413822343611206, 0.03839813873967835037683252486414168591783, 0.09259522469900263528289137543861635588928, 0.1672510113915577314955224787593571163747, 0.2586235407057625165897907328226910025245, 0.3621313972822388004086812982273215588635, 0.4725843860041177251750946426785972728715, 0.5844439640213404555042208478109107062953, 0.6921010017196016568970419516876697301809, 0.7901570282734374855528633324993759322704, 0.8736948213066894193677145671317438911734, 0.9385244591007310123976333867652993517340, 0.9813896349890121485602806221597123115527, 1.000000000000000000000000000000000000000},
 {0.006416760792818456810820464094507178865720, 0.03350140453201314003596392857057248161039, 0.08098549968195518439245130773998218722767, 0.1468048676812137299236601652607991515600, 0.2280842706492579915346440986199429719416, 0.3212717439889361744023403974130354496573, 0.4222946573075702578404089875181026958218, 0.5267378613398730320537269448128829953761, 0.6300366883704039578844805941314332791605, 0.7276764528892646854360267279903316966166, 0.8153897394434746419730742186120575147090, 0.8893428088195155396908716609464895647038, 0.9463027000602753835334059434247240449123, 0.9837752340986002382812280091410008568029, 1.000000000000000000000000000000000000000},
 {0.005640688972511709757506466579444200966084, 0.02948229864794248663164098471800370918701, 0.07141295311515884005478390174673491912187, 0.1298310255535910559712545380942899123177, 0.2024927550501040475682199883202304426029, 0.2866060862575270599840260454843964124632, 0.3789386886469780381065290091427738514255, 0.4759423084632348605725889920158496815427, 0.5738891609066858806714538552375264393340, 0.6690151950299598765386956390531395651245, 0.7576647390313427119970742777402853179407, 0.8364309606056101239755590856541831966144, 0.9022867006793780266312385046620090802655, 0.9527004099058333143380442075242620935056, 0.9857305452631742252659006330591292421045, 1.000000000000000000000000000000000000000},
 {0.004997299663771921042651149601520690335334, 0.02614351368139405197854932338054296839545, 0.06343094558383674549252822277070085989944, 0.1155984375798159401789236282473972563727, 0.1808705596578836662475733912556982106123, 0.2570248078451708599229442395592698543456, 0.3414679275478230686258992979386936719114, 0.4313243435956253750835922695827402886100, 0.5235341160251683205174701650756566635861, 0.6149571518764895174896408338190829300762, 0.7024801379250410444548069755376171424392, 0.7831225539648680838521817825620535305797, 0.8541381477752106336651136838193234409327, 0.9131083765371412746295855467032689982674, 0.9580244176904754545449593445542902781691, 0.9873530206260416180311559031679007912252, 1.000000000000000000000000000000000000000},
 {0.004457993567787391754506229111546399964634, 0.02334009412377427396702152820768312299586, 0.05670796876907823953271333155652064225840, 0.1035554329351970634134912269613124043655, 0.1624600034281365499816295439141031838558, 0.2316321257771721829467972257383587479080, 0.3089701177521959033175242612862631293729, 0.3921241347220956580336194633319030935712, 0.4785675968530795887837104628593678634649, 0.5656739668866343319033069760096456365875, 0.6507965584533822647314874073231465774368, 0.7313489527340513821330214955629758769643, 0.8048835785249664919991777013970255022373, 0.8691660595674136192044464980111575364806, 0.9222430345922984084871073282303817691603, 0.9625011978233500412504607753885055612059, 0.9887140406322437514171214022529600950271, 1.000000000000000000000000000000000000000},
 {0.004001479383867386797042719910270824223541, 0.02096364839376647799513560098656109675689, 0.05099404158789055396677492129985342752684, 0.09328039592854495077760905882606572909110, 0.1466701036776179571516088297346119926829, 0.2097070395888429667218817114520340564345, 0.2806717900601716991068192620345454984655, 0.3576286499766346293983271429839001635516, 0.4384784492241381176518542603874069642668, 0.5210158208707761473198147915854717855661, 0.6029893605598320721374807041874726334762, 0.6821630391136515650188220799815272984812, 0.7563771934061506267981673359097779706474, 0.8236074297748695658739488546206220397695, 0.8820198253620791467312412088622993480054, 0.9300208896996932164819585047276942532418, 0.9663007519456325424115067464906798893423, 0.9898668482025971344167630227759617852273, 1.00000000000000000000000000000000000000},
 {0.003611642818556893034453210126251983467333, 0.01893183703158821725026452431694923674614, 0.04609793304843108357392477083545909375906, 0.08444722278420982059984790045116954757569, 0.1330361885580987754240874239752163178462, 0.1906685949047633510874746648871937910512, 0.2559254034821029602520473972952833166965, 0.3271998007638117157284299652756602156955, 0.4027367861650770951230470111048776348627, 0.4806763935785519026332213524827062607959, 0.5590994926490319878469279758790814850486, 0.6360750448792708946910910570981647668668, 0.7097076516539023988437467831116355144609, 0.7781842229767616142092996470420758791284, 0.8398186157087110778386362944292882561000, 0.8930931349818449707509811545649148473624, 0.9366958480743650805439055020819450266812, 0.9695526370802208854719287862322660049706, 0.9908518052709556853530948352201172311415, 1.000000000000000000000000000000000000000},
 {0.003276106669050098975264676112871143292010, 0.01718121814525571373824770463158205217142, 0.04187143111776519524423463414370851114955, 0.07680083708962197048187052301994736761574, 0.1211898673236760656176861522945444470236, 0.1740471126355421652241579341996569921878, 0.2341918863135921908944557128323043352373, 0.3002806768359501643662584187171734631747, 0.3708371805843968964453220795377124336991, 0.4442852869630111621288239178359750500364, 0.5189842887035737296184117608302417580161, 0.5932655334835064879673930865443734208474, 0.6654696989055136479537295881338505673772, 0.7339838582356594497320271932958407316825, 0.7972775083365946877021888513752729067366, 0.8539367530358904570890043916180165250991, 0.9026958717934536922763469416996700772865, 0.9424655423631863386908918774276637741177, 0.9723569466474369111847018716646485313956, 0.9916999557929327307665436596947020094147, 1.00000000000000000000000000000000000000},
 {0.002985237283213062741888784075749833348046, 0.01566228055757354733289561065567830149720, 0.03819828824507355334483281939565778780322, 0.07013961906232579813984265676375811407082, 0.1108366733203635022376253075861617420191, 0.1594611294440652502638138083655501810580, 0.2150231853580202850809121676459173588900, 0.2763917790937831724096862097630639456644, 0.3423176329587307937234813237124575051663, 0.4114586915619051989269753361265125049694, 0.4824074446124388805353185218595824144468, 0.5537195807282935914003656124348565130223, 0.6239433897212819474963058147440920154900, 0.6916493150129622572194466789692474731114, 0.7554590544496869862658499728148629393664, 0.8140736165126974167889441095793418834761, 0.8662997589709565970763633043579206958621, 0.9110742658026157747796664327661934805099, 0.9474855444063973466860989716611313948903, 0.9747919756603656530791520912867540805523, 0.9924354907256214774937902793889982068789, 1.000000000000000000000000000000000000000},
 {0.002731446008884229684008970450320001444920, 0.01433593348369970618530803928505257182213, 0.03498632835121644938721881407108470789541, 0.06430264113215888253127507139568606483527, 0.1017393434521639240125822659379428899540, 0.1465992001576654169265658426695235179279, 0.1980466041181826148466050402800147983668, 0.2551232069716869695768287350762534865017, 0.3167657887104472718342111760237885655859, 0.3818260692567502030509512762811186856944, 0.4490921009868173325138719504239347417476, 0.5173108459509911200513628668417419502531, 0.5852115179512991297552453346740838766873, 0.6515292548958144740358068223118511349859, 0.7150286804747624026121578393379999446390, 0.7745269160648226353202027384109920682527, 0.8289156136217265123540054985427691593399, 0.8771815974654200209935832382780264667217, 0.9184257249898492632792699442543246960818, 0.9518795932297199145233254132304692539088, 0.9769196632371288671781665711370362045686, 0.9930774850443482149030021066415407683407, 1.000000000000000000000000000000000000000},
 {0.002508689638982744438582834305084970754466, 0.01317098500036888781833393883008497304238, 0.03216172768263549326403367565653550535206, 0.05916028461389076523322206577362019497788, 0.09370523422563984366939026810701599431295, 0.1352056309863808460458454746251433160912, 0.1829514347762067378172412190531632831474, 0.2361257194699659752033367975673903519867, 0.2938186667005872290547424363576361134204, 0.3550431384266732981536948763163021427210, 0.4187515692045311374092315829147009424821, 0.4838538912019967973430622916413376995837, 0.5492361859337143986849444709434036999596, 0.6137797438222284322478251318001054000018, 0.6763802055359521297445541267501844773126, 0.7359664575449968693948098166623482992411, 0.7915189583921991649995448115618995639699, 0.8420871815760147938272551090762841119895, 0.8868058750607934334740477882285871206071, 0.9249098542075925823337164109969201318995, 0.9557470550763801263062809349956559935085, 0.9787895175170725588787939186958919174535, 0.9936411423413659674234674659492144344826, 1.000000000000000000000000000000000000000}};

static void equidist(KNVector& mesh)
{
  const size_t m = mesh.size();
  for (size_t i = 0; i < m; i++) mesh(i) = (double)i / ((double)m - 1);
}

// roots of the polynomial d^n/dx^n (x^2-1)^n
// scaled from [-1,1] to [0,1]
static void poly_gau(KNVector& roots)
{
  const size_t m = roots.size();
  /* construct the matrix */
  P_ERROR_X3(m < sizeof(legendre_roots[0])/sizeof(double), "Unavailable polynomial order ", m, ".");
  for (size_t i = 0; i < m; ++i)
  {
    roots(i) = legendre_roots[m][i];
  }
}

// roots of the polynomial d^(n-1)/dx^(n-1) x^(n-1) * (x-1)^n
// no scaling necessary
static void poly_radau(KNVector& roots)
{
  const size_t m = roots.size();
  /* construct the matrix */
  P_ERROR_X3(m < sizeof(radau_roots[0])/sizeof(double), "Unavailable polynomial order ", m, ".");
  for (size_t i = 0; i < m; ++i)
  {
    roots(i) = radau_roots[m][i];
  }
}

inline static void repr_mesh(KNVector& V)
{
  equidist(V);
}

// Need to change this for algebraic equationss
//inline static void col_mesh(KNVector& V)
//{
//  poly_radau(V);
//}

static inline void poly_mul(KNVector& pp, double bb, double aa)
{
  P_ASSERT_X1(pp(pp.size() - 1) == 0.0, "poly_linmul: truncating the highest order term!");
  for (size_t i = pp.size() - 1; i > 0; --i)
  {
    pp(i) = aa * pp(i) + bb * pp(i - 1);
  }
  pp(0) = aa * pp(0);
}

static void poly_diff_int_trap(KNMatrix& sum, const KNVector& t)
{
  const size_t dim = t.size();
  const size_t DIVS = 8*dim;
  sum.clear();
  KNVector lout(dim);
  KNVector dout(dim);
  double d;
  for (size_t k = 0; k < DIVS; ++k)
  {
    poly_lgr(t, lout, k*1.0/((double)DIVS-1.0));
    poly_dlg(t, dout, k*1.0/((double)DIVS-1.0));
    if ((k==0)||(k==DIVS-1)) d = 0.5/(DIVS-1);
    else d = 1.0/(DIVS-1);
    for (size_t i = 0; i < dim; i++)
	{
	  for (size_t j = 0; j < dim; j++)
	  {
	    sum(i,j) += d*dout(i)*lout(j);
	  }
	}
  }
}

static void poly_int_trap(KNMatrix& sum, const KNVector& t)
{
  const size_t dim = t.size();
  const size_t DIVS = 8*dim;
  sum.clear();
  KNVector lout(dim);
  double d;
  for (size_t k = 0; k < DIVS; ++k)
  {
    poly_lgr(t, lout, k*1.0/((double)DIVS-1.0));
    if ((k==0)||(k==DIVS-1)) d = 0.5/(DIVS-1);
    else d = 1.0/(DIVS-1);
    for (size_t i = 0; i < dim; i++)
	{
	  for (size_t j = 0; j < dim; j++)
	  {
	    sum(i,j) += d*lout(i)*lout(j);
	  }
	}
  }
}

static void poly_int(KNMatrix& out, const KNVector& t)
{
  size_t i, j, k;
  KNVector poly(2*t.size());
  KNVector poly1(t.size());
  KNVector poly2(t.size());

  for (i = 0; i < t.size(); i++)
  {
    for (j = 0; j < t.size(); j++)
    {
      poly.clear();
      poly1.clear();
      poly2.clear();
      poly1(0) = 1.0;
      poly2(0) = 1.0;
      //      poly.print();
      // i,j az out matrix indexe
      //      cout<<"in:poly_mul\n";
      for (k = 0; k < t.size(); k++)
      {
        if (k != i)
          poly_mul(poly1, 1.0, -t(k));
        if (k != j)
          poly_mul(poly2, 1.0, -t(k));
      }
      poly1 /= poly_eval(poly1,t(i));
      poly2 /= poly_eval(poly2,t(j));
      poly_coeff_mul(poly, poly1, poly2);
      // integrate
      for (k = 0; k < poly.size(); k++) poly(k) /= k + 1.0;
      out(i, j) = 0.0;
      // evaluate at x = 0..1
      for (k = 0; k < poly.size(); k++) out(i, j) += poly(k);
    }
  }
//   out.clear();
//   for (i = 0; i < t.size(); i++) out(i,i) = 1.0/t.size();
}

static void poly_diff_int(KNMatrix& out, const KNVector& t)
{
  size_t i, j, k;
  KNVector poly(2*t.size());
  KNVector poly1(t.size());
  KNVector poly1_d(t.size());
  KNVector poly2(t.size());

  for (i = 0; i < t.size(); i++)
  {
    for (j = 0; j < t.size(); j++)
    {
      poly.clear();
      poly1.clear();
      poly1_d.clear();
      poly2.clear();
      poly1(0) = 1.0;
      poly2(0) = 1.0;
      //      poly.print();
      // i,j az out matrix indexe
      //      cout<<"in:poly_mul\n";
      for (k = 0; k < t.size(); k++)
      {
        if (k != i)
          poly_mul(poly1, 1.0, -t(k));
        if (k != j)
          poly_mul(poly2, 1.0, -t(k));
      }
      poly1 /= poly_eval(poly1,t(i));
      poly2 /= poly_eval(poly2,t(j));
      poly_coeff_diff(poly1_d, poly1);
      poly_coeff_mul(poly, poly1_d, poly2);
      // integrate
      for (k = 0; k < poly.size(); k++) poly(k) /= k + 1.0;
      out(i, j) = 0.0;
      // evaluate at x = 0..1
      for (k = 0; k < poly.size(); k++) out(i, j) += poly(k);
    }
  }
}

#define NDIM ndim
#define NPAR npar
#define NINT nint
#define NDEG ndeg

KNAbstractBvpCollocation::KNAbstractBvpCollocation(KNSystem& _sys, const size_t _nint, const size_t _ndeg) :
    mass(_sys.ndim()),
    ndim(_sys.ndim()), npar(_sys.npar()),
    nint(_nint), ndeg(_ndeg),
    time(nint*ndeg),
    timeMSH(ndeg*nint + 1),
    metric(ndeg + 1, ndeg + 1),
    metricPhase(ndeg + 1, ndeg + 1),
    mesh(nint + 1), 
    meshINT(ndeg + 1),
    col(ndeg),
    lgr(ndeg+1, ndeg+1),
    out(ndeg + 1)
{
  sys = &_sys;
  sys->mass(mass); // the derivatives will be multiplied by this
  for (size_t i = 0; i < nint + 1; i++) mesh(i) = i * 1.0 / nint;
  repr_mesh(meshINT);
  
  // find out if there are algebraic equations
  bool alg = false;
  for (size_t i = 0; i < mass.size(); i++) if (mass(i) == 0.0) alg = true;
  
  if (alg) poly_radau(col);
  else poly_gau(col);
  col.print();
  
  for (size_t i = 0; i < NINT; i++)   // i: interval; j: which collocation point
  {
    for (size_t j = 0; j < NDEG; j++)
    {
      const size_t idx = j + i * NDEG;
      const double h0 = mesh(i + 1) - mesh(i);
      time(idx) = mesh(i) + h0 * col(j);
      timeMSH(idx) = mesh(i) + h0 * meshINT(j);
    }
  }
  poly_int_trap(metric, meshINT);
  poly_diff_int_trap(metricPhase, meshINT);
//  meshINT.print();
//  col.print();
//  metric.print();
//  metricPhase.print();

  // computes the largrange coefficients
  for (size_t i = 0; i < ndeg+1; i++)
  {
    poly_coeff_lgr(lgr(i), meshINT, i);
  }
}

size_t KNAbstractBvpCollocation::meshlookup(const KNVector& mesh, double t)
{
  // binary search for in which interval is t-tau(k)
  size_t mid, low = 0, up = mesh.size() - 1;
  while (up - low > 1)
  {
    mid = low + (up - low) / 2;
    if ((mesh(low) < t) && (t <= mesh(mid))) up = mid;
    else low = mid;
  }
//  if (mesh(low) == t) std::cout << "-LO-";
//  if (mesh(low+1) == t) std::cout << "-HI-";
  return low;
}

//----------------------------------------------------------------------------
//
// here are the mesh adaptation routines
//
//----------------------------------------------------------------------------

static void meshConstruct(KNVector& newmesh, const KNVector& oldmesh, const KNVector& eqf)
{
//   for (int i = 1; i < eqf.size()-1; i++) if (isnan(eqf(i))) std::cout<<i<<": nan ";
//   std::cout<<"first "<<eqf(1)<<" end "<<eqf(NINT)<<" ratio "<< eqf(1)/eqf(NINT)<<"\n";
  // now computing the new mesh
  const size_t nint = oldmesh.size()-1;
  newmesh(0) = 0.0;
  for (size_t i = 1; i < newmesh.size()-1; i++)
  {
    const double t = eqf(nint)*i/(newmesh.size()-1);
    const size_t idx = KNAbstractBvpCollocation::meshlookup( eqf, t );
    const double d = (t - eqf(idx))/(eqf(idx+1)-eqf(idx));
//     std::cout<<t<<":"<<d<<":"<<i<<":"<<idx<<":"<<mesh(idx) + d*(mesh(idx+1)-mesh(idx))<<" : "<<mesh(idx+1)-mesh(idx)<<"\n";
    newmesh(i) = oldmesh(idx) + d*(oldmesh(idx+1)-oldmesh(idx));
//     if (eqf(i) < eqf(i-1)) std::cout<<"bad "<<eqf(i-1)<<", "<<eqf(i)<<"\n";
//     if (newmesh(i) < newmesh(i-1)) std::cout<<"very bad "<<newmesh(i-1)<<", "<<newmesh(i)<<"\n";
  }
  newmesh(newmesh.size()-1) = 1.0;
}

static void meshAssess(KNVector& eqf, const KNVector& mesh, const KNVector& profile, const KNArray1D< KNArray1D<double> >& lgr)
{
  size_t ndeg_ = lgr.size() - 1;
  size_t nint_ = mesh.size() - 1;
  P_ERROR_X1( profile.size() % (ndeg_*nint_ + 1) == 0, "Wrong profile size.");
  size_t ndim_ = profile.size() / (ndeg_*nint_ + 1);
  
  // compute the coeff of the highest degree term in each interval
  bool small_deri = true;
  const double hmach = 1e-6;
  KNMatrix hd(nint_+1, ndim_);
  for (size_t i = 0; i < nint_; i++)
  {
    for (size_t p = 0; p < ndim_; p++)
    {
      hd(i, p) = 0.0;
      for (size_t j = 0; j < ndeg_+1; j++)
      {
        hd(i,p) += lgr(j)(ndeg_)*profile( p + ndim_*( j + ndeg_*i ) );
      }
      // adjust by the mesh interval
      hd(i,p) /= pow(mesh(i+1)-mesh(i),ndeg_);
      if (fabs(hd(i,p)) > hmach) small_deri = false;
    }
  }
//   if (small_deri) std::cout<<"small derivatives\n";
  // takes care of periodicity
  // this has to be changed when other boundary condition is used
  for (size_t p = 0; p < ndim_; p++)
  {
    hd(nint_,p) = hd(0,p);
  }
  // computes the (m+1)-th derivative.
  // The mesh modulo need not to be changed, when not periodic BC is used.
  for (size_t i = 0; i < nint_; i++)
  {
    double dtav;
    if ( i+2 < nint_ ) dtav = 0.5*(mesh(i+2)-mesh(i));
    else dtav = 0.5*(1.0+mesh((i+2)-nint_)-mesh(i));
    if( dtav < 0.0 ) std::cout<<"dtav<0\n";
    for (size_t p = 0; p < ndim_; p++)
    {
      hd(i,p) = (hd(i+1,p) - hd(i,p))/dtav;
    }
  }
  // takes care of periodicity
  // this has to be changed when other boundary condition is used
  for (size_t p = 0; p < ndim_; p++)
  {
    hd(nint_,p) = hd(0,p);
  }
  // eqf contains the integral which has to be equidistributed
  P_ERROR_X1( eqf.size() == nint_+1, "EQF has wrong size.");
  // when the derivatives are too small;
  eqf(0) = 0.0;
  // computing eqf
  const double pwr=1.0/(ndeg_+1.0);
  for (size_t j=0; j < nint_; ++j)
  {
    double EP=0;
    if (j == 0)
    {
      for (size_t i = 0; i < ndim_; ++i)
      {
        EP+=pow(fabs(hd(nint_,i)),pwr);
      }
    } else
    {
      for (size_t i = 0; i < ndim_; ++i)
      {
        EP+=pow(fabs(hd(j-1,i)),pwr);
      }
    }
    double E=0;
    for (size_t i = 0; i < ndim_; ++i)
    {
      E+=pow(fabs(hd(j,i)),pwr);
    }
    eqf(j+1)=eqf(j)+0.5*(mesh(j+1)-mesh(j))*(E+EP);
    if (E+EP==0) small_deri = true;
  }
  if (small_deri) for (size_t i = 0; i < nint_+1; ++i) eqf(i) = i;
}

void KNAbstractBvpCollocation::meshAdapt_internal( KNVector& newmesh, const KNVector& profile )
{
  KNVector eqf(NINT+1);
  meshAssess(eqf, mesh, profile, lgr);
  meshConstruct(newmesh, mesh, eqf);
}

static void profileConvert(KNVector& newprofile, const KNVector& newmesh, const KNVector& profile, const KNVector& mesh,
                           const KNArray1D< KNArray1D<double> >& old_lgr, const size_t ndim)
{
  const size_t old_nint = mesh.size()-1;
  const size_t old_ndeg = (profile.size()/ndim - 1)/old_nint;
  const size_t new_nint = newmesh.size()-1;
  const size_t new_ndeg = (newprofile.size()/ndim - 1)/new_nint;
  // creating the new profile with the same old meshINT
  for (size_t i = 0; i < new_nint; i++)
  {
    for (size_t j = 0; j < new_ndeg; j++)
    {
      const double t = newmesh(i) + j*(newmesh(i+1)-newmesh(i))/new_ndeg;
      size_t idx = KNAbstractBvpCollocation::meshlookup( mesh, t );
      const double d = (t - mesh(idx))/(mesh(idx+1)-mesh(idx));
      for (size_t p = 0; p < ndim; p++)
        newprofile(p+ndim*(j+i*new_ndeg)) = 0.0;
      for (size_t k = 0; k < old_ndeg+1; k++)
      {
        double c = poly_eval(old_lgr(k), d);
        for (size_t p = 0; p < ndim; p++)
        {
          newprofile(p+ndim*(j+i*new_ndeg)) += c*profile(p+ndim*(k+idx*old_ndeg));
        }
      }
    }
  }
  for (size_t p = 0; p < ndim; p++)
    newprofile(p+ndim*(new_ndeg*(newmesh.size()-1))) = profile(p+ndim*(old_ndeg*(mesh.size()-1)));
}

void KNAbstractBvpCollocation::meshAdapt(KNVector& newprofile, const KNVector& profile, KNVector& newtangent, const KNVector& tangent)
{
  // saving the solution into solNu
#ifdef DEBUG
  KNVector profile_tmp(profile);
#endif

  KNVector newmesh(mesh);
  meshAdapt_internal(newmesh, profile);
  profileConvert(newprofile, newmesh, profile, mesh, lgr, NDIM);
  profileConvert(newtangent, newmesh, tangent, mesh, lgr, NDIM);
#ifdef DEBUG
  // printing the adapted profile
  std::ofstream file1("prof");
  file1 << std::scientific;
  file1.precision(12);
  std::ofstream file2("newprof");
  file2 << std::scientific;
  file2.precision(12);

  std::ofstream file3("gradient");
  file3 << std::scientific;
  file3.precision(12);
  for (size_t i=0; i<NINT; ++i)
  {
    for (size_t j=0; j<NDEG+1; ++j)
    {
      const double t1 = mesh(i) + j*(mesh(i+1)-mesh(i))/NDEG;
      const double t2 = newmesh(i) + j*(newmesh(i+1)-newmesh(i))/NDEG;
      file1<<t1<<"\t";
      file2<<t2<<"\t";
      file3<<t1<<"\t"<<t2<<"\t";
      for (size_t p=0; p<NDIM; ++p)
      {
	file1<<profile_tmp(p+NDIM*(j+NDEG*i))<<"\t";
	file2<<profile(p+NDIM*(j+NDEG*i))<<"\t";
      }
      file1<<"\n";
      file2<<"\n";
      file3<<"\n";
    }
  }
#endif //DEBUG
  mesh = newmesh;
}

//----------------------------------------------------------------------------
//
// here are the integration routines
//
//----------------------------------------------------------------------------

void KNAbstractBvpCollocation::getMetric(KNMatrix& mt, const KNVector& t)
{
  poly_int(mt, t);
}

void KNAbstractBvpCollocation::getDiffMetric(KNMatrix& mt, const KNVector& t)
{
  poly_int(mt, t);
}

void KNAbstractBvpCollocation::star(KNVector& out, const KNVector& in, const KNMatrix& mt, const KNVector& msh, size_t dim)
{
  const size_t t_deg = mt.col() - 1;
  const size_t t_int = (out.size() / dim - 1) / t_deg;
  P_ERROR(in.size() == out.size());
  P_ERROR(out.size() == dim*(t_deg*t_int + 1));
  P_ERROR(msh.size() == t_int + 1);
  out.clear();
  for (size_t i = 0; i < t_int; ++i)
  {
    const double dx = msh(i + 1) - msh(i);
    // ez itt a matrixszorzas
    for (size_t k = 0; k < t_deg + 1; ++k)
    {
      for (size_t l = 0; l < t_deg + 1; ++l)
      {
        for (size_t j = 0; j < dim; ++j)
        {
          out(j + dim*(k + i*t_deg)) += dx * mt(k, l) * in(j + dim * (l + i * t_deg));
        }
      }
    }
  }
#ifdef MADD // whether we need to add the headpoint ?
  for (size_t j = 0; j < dim; j++)
  {
    out(t_int*t_deg*dim + j) += in(t_int * t_deg * dim + j);
  }
#endif
}

double KNAbstractBvpCollocation::integrate(const KNVector& v1, const KNVector& v2, const KNMatrix& mt, const KNVector& msh, size_t dim)
{
  double res = 0.0;
  const size_t t_deg = mt.col() - 1;
  const size_t t_int = (v1.size() / dim - 1) / t_deg;
  P_ERROR(v1.size() == v2.size());
  P_ERROR(v1.size() == dim*(t_deg*t_int + 1));
  P_ERROR(msh.size() == t_int + 1);
  for (size_t i = 0; i < t_int; ++i)
  {
    const double dx = msh(i + 1) - msh(i);
    // ez itt a matrixszorzas
    for (size_t k = 0; k < t_deg; ++k)
    {
      for (size_t l = 0; l < t_deg; ++l)
      {
        for (size_t j = 0; j < dim; ++j)
        {
          res += v1(j + dim * (k + i * t_deg)) * dx * mt(k, l) * v2(j + dim * (l + i * t_deg));
        }
      }
    }
  }
#ifdef MADD // whether we need to add the headpoint ?
  for (size_t j = 0; j < dim; j++)
  {
    res += v1(t_int * t_deg * dim + j) * v2(t_int * t_deg * dim + j);
  }
#endif
  return res;
}

void KNAbstractBvpCollocation::star(KNVector& V1, const KNVector& V2)
{
  V1.clear();
  for (size_t i = 0; i < NINT; i++)
  {
    const double dx = mesh(i + 1) - mesh(i);
    for (size_t j = 0; j < NDIM; j++)
    {
      // ez itt a matrixszorzas
      for (size_t k = 0; k < NDEG + 1; k++)
      {
        for (size_t l = 0; l < NDEG + 1; l++)
        {
          V1(j + NDIM*(k + i*NDEG)) += dx * metric(k, l) * V2(j + NDIM * (l + i * NDEG));
        }
      }
    }
  }

#ifdef MADD // whether we need to add the headpoint ?

  // Now we add (M udot)^* M\phi + <udot, \phi > ...
  for (int j = 0; j < NDIM; j++)
  {
    V1(NINT*NDEG*NDIM + j) += V2(NINT * NDEG * NDIM + j);
  }

#endif
}

double KNAbstractBvpCollocation::integrate(const KNVector& V1, const KNVector& V2)
{
  double res = 0.0, head = 0.0;
  for (size_t i = 0; i < NINT; i++)
  {
    const double dx = mesh(i + 1) - mesh(i);
    for (size_t j = 0; j < NDIM; j++)
    {
      // ez itt a matrixszorzas
      for (size_t k = 0; k < NDEG + 1; k++)
      {
        for (size_t l = 0; l < NDEG + 1; l++)
        {
          res += dx * V1(j + NDIM * (k + i * NDEG)) * metric(k, l) * V2(j + NDIM * (l + i * NDEG));
        }
      }
    }
  }

#ifdef MADD
  for (size_t j = 0; j < NDIM; j++)
  {
    head += V1(NINT * NDEG * NDIM + j) * V2(NINT * NDEG * NDIM + j);
  }
#endif

  return res + head;
}

double KNAbstractBvpCollocation::integrateWithCp(const KNVector& V1, const KNVector& V2, const KNVector& V3)
{
  double res = 0.0, head = 0.0;
  for (size_t i = 0; i < NINT; i++)
  {
    const double dx = mesh(i + 1) - mesh(i);
    for (size_t j = 0; j < NDIM; j++)
    {
      // ez itt a matrixszorzas
      for (size_t k = 0; k < NDEG + 1; k++)
      {
        for (size_t l = 0; l < NDEG + 1; l++)
        {
          res += dx * V1(j + NDIM * (k + i * NDEG)) * metric(k, l) * (V2(j + NDIM * (l + i * NDEG)) - V3(j + NDIM * (l + i * NDEG)));
        }
      }
    }
  }
#ifdef MADD
  for (size_t j = 0; j < NDIM; j++)
  {
    head += V1(NINT * NDEG * NDIM + j) * (V2(NINT * NDEG * NDIM + j) - V3(NINT * NDEG * NDIM + j));
  }
#endif
  return res + head;
}

void KNAbstractBvpCollocation::phaseStar(KNVector& V1, const KNVector& V2)
{
  V1.clear();
  for (size_t i = 0; i < NINT; i++)
  {
    for (size_t j = 0; j < NDIM; j++)
    {
      if (mass(j) != 0.0)
      {
        // ez itt a matrixszorzas
        for (size_t k = 0; k < NDEG + 1; k++)
        {
          for (size_t l = 0; l < NDEG + 1; l++)
          {
            V1(j + NDIM*(k + i*NDEG)) += metricPhase(k, l) * V2(j + NDIM * (l + i * NDEG));
          }
        }
      }
    }
  }
}

void KNAbstractBvpCollocation::phaseRotationStar(KNVector& V1, const KNVector& V2, const KNArray1D<size_t>& Re, const KNArray1D<size_t>& Im)
{
  V1.clear();
  for (size_t i = 0; i < NINT; i++)
  {
    const double dx = mesh(i + 1) - mesh(i);
    for (size_t j = 0; j < Re.size(); j++)
    {
      // ez itt a matrixszorzas
      for (size_t k = 0; k < NDEG + 1; k++)
      {
        for (size_t l = 0; l < NDEG + 1; l++)
        {
          V1(Re(j) + NDIM*(k + i*NDEG)) -= dx * metric(k, l) * V2(Im(j) + NDIM * (l + i * NDEG));
          V1(Im(j) + NDIM*(k + i*NDEG)) += dx * metric(k, l) * V2(Re(j) + NDIM * (l + i * NDEG));
        }
      }
    }
  }
}

void KNAbstractBvpCollocation::pdMeshConvert(KNVector& newprofile, KNVector& newtangent, const KNVector& oldprofile, const KNVector& oldtangent)
{
  KNVector tmp_mesh(2*NINT+1);
  KNVector tmp_profile(NDIM*(2*NINT*NDEG+1));
  KNVector tmp_tangent(NDIM*(2*NINT*NDEG+1));
  for (size_t i = 0; i < NINT; ++i)
  {
    tmp_mesh(i) = 0.0 + 0.5*mesh(i);
    tmp_mesh(NINT+i) = 0.5 + 0.5*mesh(i);
    for (size_t j = 0; j < NDEG; ++j)
    {
      for (size_t p = 0; p < NDIM; ++p)
      {
        tmp_profile(p+NDIM*(j+i*NDEG))        = oldprofile(p+NDIM*(j+i*NDEG));
        tmp_profile(p+NDIM*(j+(i+NINT)*NDEG)) = oldprofile(p+NDIM*(j+i*NDEG));
        tmp_tangent(p+NDIM*(j+i*NDEG))        = oldtangent(p+NDIM*(j+i*NDEG));
        tmp_tangent(p+NDIM*(j+(i+NINT)*NDEG)) = -oldtangent(p+NDIM*(j+i*NDEG));
      }
    }
  }
  tmp_mesh(2*NINT) = 1.0;
  for (size_t p = 0; p < NDIM; ++p)
  {
    tmp_profile(p+NDIM*(2*NINT*NDEG)) = tmp_profile(p);
    tmp_tangent(p+NDIM*(2*NINT*NDEG)) = tmp_tangent(p);
  }
  // constructing the new mesh
  KNVector eqf(tmp_mesh.size());
  for (size_t i = 0; i < eqf.size(); ++i) eqf(i) = i;
  meshConstruct(mesh, tmp_mesh, eqf);
  profileConvert(newprofile, mesh, tmp_profile, tmp_mesh, lgr, NDIM);
  profileConvert(newtangent, mesh, tmp_tangent, tmp_mesh, lgr, NDIM);
}

void KNAbstractBvpCollocation::importProfile(KNVector& newprofile, const KNVector& oldprofile, const KNVector& oldmesh, size_t old_ndeg, bool adapt)
{
  KNVector old_meshINT(old_ndeg+1);
  repr_mesh(old_meshINT);

  KNArray1D< KNArray1D<double> > old_lgr(old_ndeg+1, old_ndeg+1);
  for (size_t i = 0; i < old_ndeg+1; i++)
  {
    poly_coeff_lgr(old_lgr(i), old_meshINT, i);
  }

  KNVector eqf(oldmesh.size());
  if (adapt) meshAssess(eqf, oldmesh, oldprofile, old_lgr);
  else for (size_t i = 0; i < oldmesh.size(); ++i) eqf(i) = i;
  meshConstruct(mesh, oldmesh, eqf);
  profileConvert(newprofile, mesh, oldprofile, oldmesh, old_lgr, NDIM);
}

// it exports for KNDdeTorusCollocation and KNDdeTorusSolution, so no last value is necessary
void KNAbstractBvpCollocation::exportProfile(KNVector& outs, const KNVector& mshint, const KNVector& mshdeg, const KNVector& in)
{
  size_t nint_ = mshint.size() - 1;
  size_t ndeg_ = mshdeg.size() - 1;
  KNVector in_mesh(NDEG + 1);
  KNVector in_lgr(NDEG + 1);

  for (size_t i = 0; i < NDEG + 1; i++) in_mesh(i) = i * 1.0 / NDEG;

  for (size_t i = 0; i < nint_; i++)
  {
    for (size_t j = 0; j < ndeg_; j++)
    {
      double t = mshint(i) + mshdeg(j) / nint_;
      size_t k = meshlookup(mesh, t);
      // std::cout<<"int "<<i<<" "<<k<<"\n";
      double c = (t - mesh(k)) / (mesh(k + 1) - mesh(k));  // mesh is the interval mesh in the class

      poly_lgr(in_mesh, in_lgr, c);
      // in_lgr.print();
      for (size_t p = 0; p < NDIM; p++)
      {
        outs(p + NDIM*(j + i*ndeg_)) = 0.0;
        for (size_t r = 0; r < NDEG + 1; r++)
        {
          outs(p + NDIM*(j + i*ndeg_)) += in(p + NDIM * (r + k * NDEG)) * in_lgr(r);
        }
      }
    }
  }
}

void KNAbstractBvpCollocation::resetProfile(KNSystem& sys, KNVector& profile)
{
   KNArray2D<double> tmp(NDIM, time.size());
   sys.stsol (tmp, time);
   for (size_t p = 0; p < NDIM; p++)
   {
     for (size_t r = 0; r < time.size(); r++)
     {
       profile (p + NDIM*r) = tmp (p,r);
     }
   }
}
